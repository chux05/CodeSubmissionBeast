@inject IJSRuntime jsr
@inject State State

<style>
  .center-inner {
    width: 80%;
    height: 80%;
    margin: auto;
    max-width: 1000px;
    max-height: 600px;
    display: flex;
    align-items: center;
    justify-content: space-evenly;
  }

  .question-container {
    width: 40%;
    height: 90%;
    margin: auto;
    padding: 20px;
    overflow: scroll;
    background-color: #fff;
    box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
    border-radius: 5px;
    font-size: 15px;
  }

  .question-container::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }

  .question-container::-webkit-scrollbar-track {
    background-color: #fff;
    border-radius: 5px;
  }

  .question-container::-webkit-scrollbar-thumb {
    background-color: #95A5A6;
    border-radius: 20px;
    border: 3px solid #fff;
  }

  .ide-container textarea::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }

  .ide-container textarea::-webkit-scrollbar-track {
    background-color: #fff;
    border-radius: 5px;
  }

  .ide-container textarea::-webkit-scrollbar-thumb {
    background-color: #95A5A6;
    border-radius: 20px;
    border: 3px solid #fff;
  }


  .ide-container {
    width: 55%;
    height: 90%;
    margin: auto;    
    box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
    border-radius: 5px;
  }

  .ide-container textarea {
    width: 100%;
    height: 100%;
    resize: none;
    border: none;
    outline: none;
    padding: 15px;
    font-size: 14px;
    background-color: #000;
    color: #84f998;
    font-family: monospace;
    border-radius: 5px;
  }

  /*IMAGE MODAL*/
  .db-image-container {
    display: none;
    position: absolute;
    width: 100%;
    height: 100vh;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.9);
  }

  .db-image-container img {
    position: absolute;
    width: 95%;
    max-width: 600px;
    height: 95%;
    max-height: 500px;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }

  .db-image-container button {
    position: absolute;
    bottom: 0;
    right: 0;
    margin: 15px;
  }

   .save-btn-container
  {
    width: 100%;
    height: fit-content;
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }

  /*MEDIA QUERIES*/
  @@media screen and (max-width: 780px) {
    .center-inner {
      flex-direction: column;
    }

  .question-container {
      width: 90%;
      height: 55%;
    }

    .ide-container {
      width: 90%;
      height: 40%;
    }

  }
</style>

<EditForm OnValidSubmit="Save" Model="Submission" class="center-inner">

  <div class="question-container">
    <h3 class="mb-3" id="question-title">Database Challenge - 2</h3>

    <p id="question-description">

      An analyst has asked you to run a query to see the number of movie tickets per genre that was sold in December last year. The data he needs is spread across two tables.
      <br>
      Using a SQL script, retrieve the data the analyst requires.

    </p>

    <button @onclick="ShowModal" class="btn btn-outline-primary btn-sm">Click here to view tables</button>
  </div>

  <div class="ide-container">
    
     <InputTextArea class="textarea" placeholder="What's your response?" @bind-Value="@Submission.Answer" spellcheck="false"/>

   <div class="save-btn-container">
          <div class="mr-3">
            <DataAnnotationsValidator />
          <ValidationSummary />
          </div>
      <button class="btn btn-primary btn-sm">Save</button>
    </div>

  </div>

</EditForm>

<div class="db-image-container" id="image-modal">

    <img src="images/tables.png" alt="table">
    <button @onclick="ShowModal" class="btn btn-danger btn-sm">Close</button>

</div>

@code
{

  public SubmissionSample Submission { get; set; } = new SubmissionSample();

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
      if(firstRender)
      {
          await jsr.InvokeVoidAsync("initialize");
          await jsr.InvokeVoidAsync("getIds");
      }

      string[] elementInfo = await jsr.InvokeAsync<string[]>("getValues");
      Submission.QuestionNumber = State.Count;
      Submission.QuestionTitle = elementInfo[0];
      Submission.QuestionDescription = elementInfo[1];

  }

  private async Task ShowModal()
  {
      await jsr.InvokeVoidAsync("showModal");
  }

  private void Save()
  {
    
     State.Submissions.Add(Submission);
  }

}