@page "/"
@inject HttpClient Http


<style>

    *{
    font-family: 'Montserrat', sans-serif;
    }

    .wrapper-reg {
        width: 100%;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .wrapper-reg h3
    {
        font-size: 3rem;
    }

    .reg-container {
        width: 90%;
        max-width: 400px;
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
        padding: 25px;
        box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
        border-radius: 5px;
    }

    .btn-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .btn-container a{
        font-size: 14px;
        margin-right: 5px;
    }

     /*MEDIA QUERIES*/
  @@media screen and (max-width: 400px)
  {
      .btn-container
      {
          flex-direction: column;
          align-items: flex-start;
          justify-content: space-evenly;
      }
  }

  @@media screen and (max-width: 215px)
  {
      .wrapper-reg 
      {
          display: none;
      }
  }


</style>


<div class="wrapper-reg">

    <h3>Register</h3>
    
    <p>@message</p>
    <p><a href="/login_">@login</a></p>

    <EditForm Model="reg" OnValidSubmit="OnValid" class="reg-container">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <InputText class="form-control" @bind-Value="reg.Email" placeholder="Enter Email"></InputText>
        </div>

        <div class="mb-2">
            <InputText type="password" class="form-control" @bind-Value="reg.Password" placeholder="Enter Password"></InputText>
        </div>
        <div class="mb-2">
            <InputText type="password" class="form-control" @bind-Value="reg.ConfirmPassword" placeholder="Confirm Password"></InputText>
        </div>

        <select class="custom-select mb-2" @onchange="OnValueChanged" title="Role is required ">
            <option value="Select" selected disabled="disabled" style="text-align:center; font-family:inherit;">-- Select Role --</option>
            <option value="Developer">Developer</option>
            <option value="Admin">Admin</option>
            <option value="Candidate">Candidate</option>
        </select>

        @if (!string.IsNullOrEmpty(reg.Role))
        {
            if (reg.Role.Equals("Developer") || reg.Role.Equals("Admin"))
            {
                <div class="mb-2">
                    <InputText type="password" class="form-control mb-2" @bind-Value="securityKey" placeholder="Enter Security Key"></InputText>
                </div>
            }
        }


        <div class="mb-2 mt-2 text-left btn-container">
            <button class="btn btn-primary btn-sm" disabled="@isDisabled">Register</button>
            &nbsp; &nbsp; <a href="/login_">Already with us? Login</a>
        </div>

    </EditForm>


</div>


@code {

    RegisterModel reg = new RegisterModel();
    string message = string.Empty;
    string login = string.Empty;
    bool isDisabled = false;
    private string securityKey = string.Empty;

    [Parameter]
    public EventCallback<string> ValueChanged
    {
        get;
        set;
    }
    private Task OnValueChanged(ChangeEventArgs e)
    {
        reg.Role = e.Value.ToString();
        return ValueChanged.InvokeAsync(reg.Role);
    }



    private async Task OnValid()
    {
        bool validSecurityKey = true;

        //check security key

        if (reg.Role != null && !reg.Role.Equals("Candidate"))
        {
            if (string.IsNullOrEmpty(securityKey) || !securityKey.Equals("1234"))
                validSecurityKey = false;

        }

        if (validSecurityKey)
        {
            isDisabled = true;
            using (var msg = await Http.PostAsJsonAsync<RegisterModel>("/api/auth/register", reg, System.Threading.CancellationToken.None))
            {
                if (msg.IsSuccessStatusCode)
                {
                    LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
                    message = result.Message;
                    if (result.Success)
                    {
                        message += " Please LOGIN to continue.";
                        login = "Click here to LOGIN.";
                    }
                    else
                        isDisabled = false;
                }
            }
        }


    }

}
