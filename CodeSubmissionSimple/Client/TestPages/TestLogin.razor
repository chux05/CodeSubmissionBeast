@page "/testlogin"
@inject HttpClient Http
@inject IJSRuntime jsr
@inject NavigationManager NavigationManager

<style>

    * {
        font-family: 'Montserrat', sans-serif;
    }

    .wrapper-log {
        width: 100%;
        height: 100vh;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        flex-direction: column;
    }

    .reg-container {
        width: 80%;
        max-width: 500px;
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
        padding: 25px;
        box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;
        border-radius: 5px;
    }

    .btn-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .btn-container a {
            font-size: 14px;
            margin-right: 5px;
        }
</style>

<div class="wrapper-log mt-5">

    <h3>Login</h3>

    @if (IsSuccessful)
    {
        <p><i>@message Initializing...</i></p>
    }
    else
    {
        <p><i>@message</i></p>
    }

    <EditForm Model="user" OnValidSubmit="OnValid" class="reg-container mt-2">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <InputText class="form-control" @bind-Value="user.Email" placeholder="Enter Email"></InputText>
        </div>
        <div class="mb-2">
            <InputText type="password" class="form-control" @bind-Value="user.Password" placeholder="Enter Password"></InputText>
        </div>
        <div class="mb-2 mt-2 text-left btn-container">
            <button class="btn btn-success btn-sm" disabled="@isDisabled">Login</button>
            &nbsp; &nbsp; <a href="/">New to the platform? Register</a>
        </div>

    </EditForm>


</div>


@code {

    LoginModel user = new LoginModel();
    string message = string.Empty;
    bool isDisabled = false;
    bool IsSuccessful = false;

    private async Task OnValid()
    {
        isDisabled = true;
        using (var msg = await Http.PostAsJsonAsync<LoginModel>("/api/auth/login", user, System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
                LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
                message = result.Message;
                isDisabled = false;
                if (result.Success)
                {
                    await jsr.InvokeVoidAsync("localStorage.setItem", "user", $"{result.Email};{result.Role};{result.JwtBearer}").ConfigureAwait(false);
                    if (result.Role.Equals("Developer") || result.Role.Equals("Admin"))
                    {
                        IsSuccessful = true;
                        NavigationManager.NavigateTo("/AdminPage");
                    }
                    IsSuccessful = true;
                    NavigationManager.NavigateTo("/testHome");
                }
            }
        }
    }


}
